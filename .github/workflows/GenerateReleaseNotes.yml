name: Generate Release Notes

on:
  workflow_dispatch:
    inputs:
      from_tag_1:
        description: "From tag for Embedded_utilities"
        required: true
      to_tag_1:
        description: "To tag for Embedded_utilities"
        required: true
      from_tag_2:
        description: "From tag for ap-startup"
        required: true
      to_tag_2:
        description: "To tag for ap-startup"
        required: true
      from_tag_3:
        description: "From tag for cloud-nms-agent"
        required: true
      to_tag_3:
        description: "To tag for cloud-nms-agent"
        required: true
      new_tag:
        description: "New tag to apply at the same commit as To tag"
        required: true

jobs:
  changelog:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.CBNG_PAT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git pandoc python3 python3-pip
          pip install pyyaml requests

      - name: Generate changelogs from tags
        run: |
          mkdir -p ReleaseNotes
          REPOS=("CBNL/Embedded_utilities" "CBNL/ap-startup" "CBNL/cloud-nms-agent")
          FROM_TAGS=("${{ inputs.from_tag_1 }}" "${{ inputs.from_tag_2 }}" "${{ inputs.from_tag_3 }}")
          TO_TAGS=("${{ inputs.to_tag_1 }}" "${{ inputs.to_tag_2 }}" "${{ inputs.to_tag_3 }}")
          NEW_TAG="${{ inputs.new_tag }}"

          for i in 0 1 2; do
            REPO="${REPOS[$i]}"
            FROM="${FROM_TAGS[$i]}"
            TO="${TO_TAGS[$i]}"
            DIR=$(basename "$REPO")

            echo "🔧 Cloning $REPO"
            git clone --quiet "https://${GH_TOKEN}@github.com/$REPO.git"
            cd "$DIR"
            git fetch --tags

            # Validate tags
            if ! git rev-parse "$FROM" >/dev/null 2>&1; then
              echo "❌ ERROR: Tag '$FROM' not found in $REPO"
              exit 1
            fi
            if ! git rev-parse "$TO" >/dev/null 2>&1; then
              echo "❌ ERROR: Tag '$TO' not found in $REPO"
              exit 1
            fi

            # Tag if not already present
            COMMIT=$(git rev-list -n 1 "$TO")
            if ! git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
              git tag "$NEW_TAG" "$COMMIT"
              git push origin "$NEW_TAG"
            fi

            # Save one-line commit logs
            git log "$FROM".."$TO" --pretty=format:"%s" > "../ReleaseNotes/changelog-${REPO//\//_}.txt"
            cd ..
            rm -rf "$DIR"
          done

      - name: Extract Jira issues and titles
        run: python3 extract_jira_titles.py
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Parse package info from YAML
        run: python3 parse_required_files.py

      - name: Combine into Markdown release notes
        run: |
          NEW_TAG="${{ inputs.new_tag }}"
          {
            echo "<div class=\"title\">Release Notes for ${NEW_TAG}</div>"
            echo ""
            echo "## Jira Issues"
            for file in ReleaseNotes/changelog-*.md; do
              cat "$file"
              echo ""
            done
            echo "## Package Summary"
            echo ""
            cat ReleaseNotes/packages-info.txt
          } > ReleaseNotes/ReleaseNotes-Summary.md

      - name: Generate custom CSS header
        run: |
          cat << 'EOF' > ReleaseNotes/header.html
<style>
  body {
    font-family: Arial, sans-serif;
    padding: 2em;
    margin: 0;
  }
  .title {
    font-size: 2em;
    text-align: center;
    font-weight: bold;
    margin-bottom: 1em;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1em;
  }
  th, td {
    border: 1px solid #999;
    padding: 0.5em;
    text-align: left;
  }
  th:nth-child(1), td:nth-child(1),
  th:nth-child(2), td:nth-child(2) {
    width: 15%;
  }
  th:nth-child(3), td:nth-child(3) {
    width: 70%;
  }
</style>
EOF

      - name: Convert Markdown to HTML
        run: |
          pandoc ReleaseNotes/ReleaseNotes-Summary.md \
            --standalone \
            --include-in-header=ReleaseNotes/header.html \
            -f markdown -t html \
            -o ReleaseNotes/ReleaseNotes-Summary-${{ inputs.new_tag }}.html

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReleaseNotes
          path: ReleaseNotes/ReleaseNotes-Summary-${{ inputs.new_tag }}.html
