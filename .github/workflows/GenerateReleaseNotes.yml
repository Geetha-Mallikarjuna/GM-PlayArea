name: Generate Release Notes

on:
  workflow_dispatch:
    inputs:
      from_tag_1:
        description: 'From tag for Embedded_utilities'
        required: true
      to_tag_1:
        description: 'To tag for Embedded_utilities'
        required: true

      from_tag_2:
        description: 'From tag for ap-startup'
        required: true
      to_tag_2:
        description: 'To tag for ap-startup'
        required: true

      from_tag_3:
        description: 'From tag for cloud-nms-agent'
        required: true
      to_tag_3:
        description: 'To tag for cloud-nms-agent'
        required: true

      new_tag:
        description: 'New tag to apply at the same commit as To tag'
        required: true

jobs:
  changelog:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git pandoc python3 python3-pip
          pip install pyyaml

      # Step 3: Generate changelogs
      - name: Generate changelogs
        run: |
          echo "📄 Creating changelog directory..."
          mkdir -p changelogs

          REPOS=(
            "Geetha-Mallikarjuna/GM-PlayArea"
            "Geetha-Mallikarjuna/GM-PlayArea-2"
            "Geetha-Mallikarjuna/GM-PlayArea-3"
          )
          FROM_TAGS=(
            "${{ inputs.from_tag_1 }}"
            "${{ inputs.from_tag_2 }}"
            "${{ inputs.from_tag_3 }}"
          )
          TO_TAGS=(
            "${{ inputs.to_tag_1 }}"
            "${{ inputs.to_tag_2 }}"
            "${{ inputs.to_tag_3 }}"
          )
          NEW_TAG="${{ inputs.new_tag }}"

          echo "🚀 Starting changelog generation loop..."
          for i in 0 1 2; do
            REPO="${REPOS[$i]}"
            FROM="${FROM_TAGS[$i]}"
            TO="${TO_TAGS[$i]}"
            REPO_DIR=$(basename "$REPO")

            echo ""
            echo "🔧 Cloning $REPO"
            git clone --quiet "https://github.com/$REPO.git"
            cd "$REPO_DIR"

            echo "🔍 Fetching tags..."
            git fetch --tags

            COMMIT=$(git rev-list -n 1 "$TO" 2>/dev/null)
            if [[ -n "$COMMIT" ]]; then
              echo "🏷️ Tagging $COMMIT with $NEW_TAG (if not exists)"
              git remote set-url origin https://${GH_TOKEN}@github.com/${REPO}.git
              if ! git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
