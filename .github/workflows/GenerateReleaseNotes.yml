name: Generate Release Notes

on:
  workflow_dispatch:
    inputs:
      from_tag_1:
        description: 'From tag for Embedded_utilities'
        required: true
      to_tag_1:
        description: 'To tag for Embedded_utilities'
        required: true

      from_tag_2:
        description: 'From tag for ap-startup'
        required: true
      to_tag_2:
        description: 'To tag for ap-startup'
        required: true

      from_tag_3:
        description: 'From tag for cloud-nms-agent'
        required: true
      to_tag_3:
        description: 'To tag for cloud-nms-agent'
        required: true

      new_tag:
        description: 'New tag to apply at the same commit as To tag'
        required: true

jobs:
  changelog:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      JIRA_URL: ${{ secrets.JIRA_URL }}
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      
    steps:
      # Checkout the current repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install required system packages and Python dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git pandoc python3 python3-pip
          pip install pyyaml requests

      # Generate changelogs and apply new tags if necessary
      - name: Generate changelogs
        run: |
          mkdir -p ReleaseNotes

          # Define repos and tags based on inputs
          REPOS=(
            "Geetha-Mallikarjuna/GM-PlayArea"
            "Geetha-Mallikarjuna/GM-PlayArea-2"
            "Geetha-Mallikarjuna/GM-PlayArea-3"
          )
          FROM_TAGS=(
            "${{ inputs.from_tag_1 }}"
            "${{ inputs.from_tag_2 }}"
            "${{ inputs.from_tag_3 }}"
          )
          TO_TAGS=(
            "${{ inputs.to_tag_1 }}"
            "${{ inputs.to_tag_2 }}"
            "${{ inputs.to_tag_3 }}"
          )
          NEW_TAG="${{ inputs.new_tag }}"

          for i in 0 1 2; do
            REPO="${REPOS[$i]}"
            FROM="${FROM_TAGS[$i]}"
            TO="${TO_TAGS[$i]}"
            REPO_DIR=$(basename "$REPO")

            git clone --quiet "https://${GH_TOKEN}@github.com/$REPO.git"
            cd "$REPO_DIR"

            git fetch --tags

            # --- 🔒 ERROR HANDLING FOR TAGS ---
            # Ensure FROM tag exists
            if ! git rev-parse "$FROM" >/dev/null 2>&1; then
              echo "❌ ERROR: Tag '$FROM' does not exist in repository '$REPO'. Please check the input."
              exit 1
            fi

            # Ensure TO tag exists
            if ! git rev-parse "$TO" >/dev/null 2>&1; then
              echo "❌ ERROR: Tag '$TO' does not exist in repository '$REPO'. Please check the input."
              exit 1
            fi
            # --- ✅ TAGS VALIDATED ---

            # Determine the commit SHA for the 'to' tag
            COMMIT=$(git rev-list -n 1 "$TO" 2>/dev/null)

            # If the commit exists, optionally apply the new tag
            if [[ -n "$COMMIT" ]]; then
              git remote set-url origin https://${GH_TOKEN}@github.com/${REPO}.git

              # Create and push the new tag if it doesn’t already exist
              if ! git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
                git tag "$NEW_TAG" "$COMMIT"
                git push origin "$NEW_TAG"
              fi
            fi

            # Generate one-line changelog without markdown for easier parsing
            FILE_MD="../ReleaseNotes/changelog-${REPO//\//_}.txt"
            git log "$FROM".."$TO" --pretty=format:"%s" > "$FILE_MD"

            cd ..
            rm -rf "$REPO_DIR"
          done

      # Run Python script to extract Jira IDs and get their titles
      - name: Extract Jira titles from changelogs
        run: |
          python3 parse_jira_titles.py --changelogs ReleaseNotes/changelog-*.txt --output ReleaseNotes/markdone.md

      # Run a Python script to extract and summarize package info
      - name: Run Python script to extract package info
        run: |
          python3 parse_required_files.py

      # Combine individual changelogs and package summary into a single markdown file
      - name: Combine changelogs and package summary
        run: |
          NEW_TAG="${{ inputs.new_tag }}"
          {
            echo "<div class=\"title\">Release Notes for ${NEW_TAG}</div>"
            echo ""
            echo "## Change List"
            echo ""
            cat ReleaseNotes/markdone.md
            echo ""
            echo "## Package Summary"
            echo ""
            cat ReleaseNotes/packages-info.txt
          } > ReleaseNotes/ReleaseNotes-Summary.md

      # Generate custom CSS header for HTML formatting (fixed indentation)
      - name: Generate custom CSS header
        run: |
          cat << 'EOF' > ReleaseNotes/header.html
          <style>
            body {
              font-family: Arial, sans-serif;
              padding: 2em;
              margin: 0;
              box-sizing: border-box;
            }
            .title {
              font-size: 2em;
              text-align: center;
              font-weight: bold;
              margin-bottom: 1em;
            }
            .table-container {
              width: 100%;
              overflow-x: auto; /* enables horizontal scroll if needed */
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin-top: 1em;
              table-layout: auto;   
            }
            th, td {
              border: 1px solid #999;
              padding: 0.5em;
              text-align: left;
              vertical-align: top;
            }
            th:nth-child(1), td:nth-child(1),
            th:nth-child(2), td:nth-child(2) {
              width: 15%;
              white-space: nowrap;
            }
            th:nth-child(3), td:nth-child(3) {
             width: 100%;
             td:nth-child(3) > div {
             white-space: nowrap;
             overflow-x: auto;
             display: block;
            }
            }
          </style>
          EOF
      # Convert markdown summary to standalone HTML with custom CSS header
      - name: Convert markdown to HTML
        run: |
          OUTPUT_FILE="ReleaseNotes/ReleaseNotes-Summary-${{ inputs.new_tag }}.html"
          pandoc ReleaseNotes/ReleaseNotes-Summary.md \
            --standalone \
            --include-in-header=ReleaseNotes/header.html \
            -f markdown -t html \
            -o "$OUTPUT_FILE"

      # Upload the generated HTML file as a workflow artifact
      - name: Upload changelogs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReleaseNotes
          path: ReleaseNotes/*
