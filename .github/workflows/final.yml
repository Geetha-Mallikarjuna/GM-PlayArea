name: Gitlog_final

on:
  workflow_dispatch:
    inputs:
      from_tag_1:
        description: 'From tag for Repo 1'
        required: true
      to_tag_1:
        description: 'To tag for Repo 1'
        required: true

      from_tag_2:
        description: 'From tag for Repo 2'
        required: true
      to_tag_2:
        description: 'To tag for Repo 2'
        required: true

      from_tag_3:
        description: 'From tag for Repo 3'
        required: true
      to_tag_3:
        description: 'To tag for Repo 3'
        required: true

      new_tag:
        description: 'New tag to apply at the same commit as To tag (e.g., Customer-Release-1.0)'
        required: true

jobs:
  changelog-only:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install git, pandoc, and Python dependencies
        run: |
          sudo apt update
          sudo apt install -y git pandoc python3 python3-pip
          pip install pyyaml

      - name: Generate changelogs (commit messages only)
        run: |
          mkdir changelogs

          REPOS=(
            "Geetha-Mallikarjuna/GM-PlayArea"
            "Geetha-Mallikarjuna/GM-PlayArea-2"
            "Geetha-Mallikarjuna/GM-PlayArea-3"
          )

          FROM_TAGS=(
            "${{ inputs.from_tag_1 }}"
            "${{ inputs.from_tag_2 }}"
            "${{ inputs.from_tag_3 }}"
          )

          TO_TAGS=(
            "${{ inputs.to_tag_1 }}"
            "${{ inputs.to_tag_2 }}"
            "${{ inputs.to_tag_3 }}"
          )

          NEW_TAG="${{ inputs.new_tag }}"

          for i in 0 1 2; do
            REPO="${REPOS[$i]}"
            FROM="${FROM_TAGS[$i]}"
            TO="${TO_TAGS[$i]}"
            REPO_DIR=$(basename "$REPO")

            echo "📦 Processing $REPO from $FROM to $TO"

            git clone --quiet "https://github.com/$REPO.git"
            cd "$REPO_DIR"
            git fetch --tags

            LOG=$(git log "$FROM".."$TO" --pretty=format:"- %s")
            echo " Tag $NEW_TAG"
            
            COMMIT=$(git rev-list -n 1 "$TO" 2>/dev/null)
            echo "Commit $COMMIT"

            if [[ -z "$COMMIT" ]]; then
              echo "❌ Failed to resolve tag '$TO' in $REPO. Skipping new tag."
            else
              git remote set-url origin https://${GH_TOKEN}@github.com/${REPO}.git
            
              if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
                echo "⚠️ Tag $NEW_TAG already exists in $REPO — skipping"
              else
                git tag "$NEW_TAG" "$COMMIT"
                git push origin "$NEW_TAG"
                echo "✅ Pushed $NEW_TAG to $REPO"
              fi
            fi

            cd ..
            rm -rf "$REPO_DIR"

            if [[ -z "$LOG" ]]; then
              echo "⚠️ No commits found between $FROM and $TO for $REPO"
              continue
            fi

            FILE_MD="changelogs/changelog-${REPO//\//_}.txt"
            echo "🔖 $REPO: $FROM → $TO" > "$FILE_MD"
            echo "" >> "$FILE_MD"
            echo "$LOG" >> "$FILE_MD"
          done

      - name: Parse package info from YAML and save to Markdown
        run: |
          echo "📄 Extracting package info from input.yaml"
          python3 -c "
import yaml, os

os.makedirs('changelogs', exist_ok=True)

with open('input.yaml', 'r') as f:
    data = yaml.safe_load(f)

require_files = data.get('require_files', [])

with open('changelogs/packages-info.txt', 'w') as out:
    out.write('# 📦 Package Summary from input.yaml\\n\\n')
    for item in require_files:
        package = item.get('package', 'N/A')
        version = item.get('version', 'N/A')
        name = item.get('name', 'N/A')
        out.write(f'- **Package:** {package}, **Version:** {version}, **Name:** `{name}`\\n')
"

      - name: Combine all changelogs into one summary file
        run: |
          cat changelogs/changelog-*.txt changelogs/packages-info.txt > changelogs/changelogs-summary.txt

          echo "✅ Markdown changelogs generated:"
          cat changelogs/changelogs-summary.txt

      - name: Convert final changelog summary to HTML
        run: |
          pandoc changelogs/changelogs-summary.txt -f markdown -t html -o changelogs/changelogs-summary.html
          echo "✅ HTML summary created at changelogs/changelogs-summary.html"

      - name: Upload changelogs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelogs
          path: changelogs
