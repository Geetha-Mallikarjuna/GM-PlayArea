name: Manual Multi-Repo Release

on:
  workflow_dispatch:
    inputs:
      release_matrix_b64:
        description: >
          Base64-encoded JSON list of releases.
          Example (run this locally to encode your JSON):
          echo '[{"repo":"org/repo1","from":"v1.0.0","to":"v1.1.0"}]' | base64
        required: true
        type: string

jobs:
  create-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Install GitHub CLI and jq
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.PERSONAL_TOKEN }}"
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      - name: Decode base64 release matrix
        run: |
          echo "${{ inputs.release_matrix_b64 }}" | base64 --decode > matrix.json
          echo "✅ Decoded input to matrix.json:"
          cat matrix.json

      - name: Parse matrix and create releases
        run: |
          COUNT=$(jq length matrix.json)
          echo "🔁 Found $COUNT release targets."

          for i in $(seq 0 $(($COUNT - 1))); do
            REPO=$(jq -r ".[$i].repo" matrix.json)
            FROM=$(jq -r ".[$i].from" matrix.json)
            TO=$(jq -r ".[$i].to" matrix.json)
            TITLE=$(jq -r ".[$i].title // \"Release $TO\"" matrix.json)

            echo "🚀 Creating release in $REPO: $FROM → $TO"

            NOTES=$(gh api repos/$REPO/releases/generate-notes \
              -f tag_name="$TO" \
              -f previous_tag_name="$FROM" \
              -q .body)

            if [[ -z "$NOTES" ]]; then
              echo "⚠️ No release notes generated for $REPO"
              continue
            fi

            echo "$NOTES" > notes.txt

            gh release create "$TO" \
              --repo "$REPO" \
              --title "$TITLE" \
              --notes-file notes.txt

            echo "✅ Release $TO created for $REPO"
          done
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
